import logging
import asyncio
from parsers.freelance_ru import FreelanceRuParser
from parsers.fl_ru import FLRuParser
from parsers.kwork_ru import KworkRuParser
from utils.notifier import notify_user
from config import PARSING_INTERVAL, LOG_FILE, LOG_LEVEL
from logging.handlers import RotatingFileHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
handler = RotatingFileHandler(
    filename=LOG_FILE,
    maxBytes=1024*1024,  # 1MB
    backupCount=3,
    encoding='utf-8'
)
logging.basicConfig(
    level=LOG_LEVEL,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[handler, logging.StreamHandler()]
)

logger = logging.getLogger(__name__)

def job():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    logger.info("üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Å–µ—Ä–æ–≤
        parsers = [
            FreelanceRuParser(),
            FLRuParser(),
            KworkRuParser()
        ]
        
        for parser in parsers:
            try:
                parser.parse()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä—Å–µ—Ä–µ {parser.__class__.__name__}: {e}")
                notify_user(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {parser.__class__.__name__}")
                
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        notify_user(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

async def async_job():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
    logger.info("üîç –ó–∞–ø—É—Å–∫–∞—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤...")
    
    parsers = [
        ("FreelanceRu", FreelanceRuParser()),
        ("FLRu", FLRuParser()),
        ("KworkRu", KworkRuParser())
    ]
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø–∞—Ä—Å–µ—Ä—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = []
        for name, parser in parsers:
            logger.info(f"–ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–µ—Ä {name}...")
            tasks.append(parser.async_find_projects())
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for (name, _), result in zip(parsers, results):
            if isinstance(result, Exception):
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä—Å–µ—Ä–µ {name}: {str(result)}", exc_info=result)
            elif result is not None:
                logger.info(f"–ü–∞—Ä—Å–µ—Ä {name} –Ω–∞—à–µ–ª {len(result) if isinstance(result, list) else 0} –ø—Ä–æ–µ–∫—Ç–æ–≤")
        
    except Exception as e:
        logger.critical(f"–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        notify_user(f"–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

async def main():
    while True:
        await async_job()
        await asyncio.sleep(PARSING_INTERVAL * 60)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    asyncio.run(main())
