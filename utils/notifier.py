import logging
import html
from typing import Optional
from telegram import Bot as TelegramBot
from telegram.ext import Application
from config import TELEGRAM_TOKEN, TELEGRAM_CHAT_ID
from utils import storage

logger = logging.getLogger(__name__)
_sent_links = storage.load_sent_links()
_application: Optional[Application] = None


def set_application(app: Application) -> None:
    """Set the application instance to use for sending messages."""
    global _application
    _application = app


def _get_bot() -> TelegramBot:
    """Return a bot instance from the application or create one if needed."""
    if _application is None or getattr(_application, "bot", None) is None:
        logger.warning(
            "Application or bot is not initialized, creating Bot instance"
        )
        return TelegramBot(TELEGRAM_TOKEN)
    return _application.bot

async def notify_start() -> None:
    """Send a bot-started notification."""
    if TELEGRAM_CHAT_ID:
        try:
            bot = _get_bot()
            await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text="\uD83E\uDD16 –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ä—Ç–µ: {e}")

async def notify_stop() -> None:
    """Send a bot-stopped notification."""
    if TELEGRAM_CHAT_ID:
        try:
            bot = _get_bot()
            await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text="\u23F9\uFE0F –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")

async def notify_user(project):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø—Ä–æ–µ–∫—Ç–µ –≤ Telegram"""
    if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
        logger.error("–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω—ã —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id –¥–ª—è Telegram")
        return

    link = project.get('link')
    if link in _sent_links:
        logger.info(f"–°—Å—ã–ª–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {link}")
        return

    title = html.escape(project['title'])
    description = html.escape(project['description'])

    message = (
        f"<b>üîπ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:</b> {title}\n"
        f"üîó <a href=\"{project['link']}\">–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑</a>\n"
        f"<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n\n"
        f"üí¨ –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/addkeyword - –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ\n"
        "/removekeyword - —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ\n"
        "/list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"
    )
    
    try:
        bot = _get_bot()
        await bot.send_message(
            chat_id=TELEGRAM_CHAT_ID,
            text=message,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {project['title']}")
        _sent_links.add(link)
        storage.save_sent_link(link)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        raise
